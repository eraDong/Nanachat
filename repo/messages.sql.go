// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: createMessage :one
INSERT INTO "messages" (
    user_chatroom_id,
    text
) VALUES (
    $1, $2
) RETURNING id, user_chatroom_id, text, created_at
`

type createMessageParams struct {
	UserChatroomID int32  `json:"user_chatroom_id"`
	Text           string `json:"text"`
}

func (q *Queries) createMessage(ctx context.Context, arg createMessageParams) (Messages, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.UserChatroomID, arg.Text)
	var i Messages
	err := row.Scan(
		&i.ID,
		&i.UserChatroomID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: deleteMessage :exec
DELETE FROM "messages"
WHERE id=@id
`

func (q *Queries) deleteMessage(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteMessage)
	return err
}

const listMessages = `-- name: listMessages :many
SELECT 
    M.id AS message_id,
    M.text,
    M.created_at,
    U.username AS sender_name,
    C.chatroom_name
FROM "messages" M
JOIN "users_chatrooms" UC ON M.user_chatroom_id = UC.id
JOIN "users" U ON UC.user_id = U.id
JOIN "chatrooms" C ON UC.chatroom_id = C.id
WHERE C.id = $1
ORDER BY M.created_at DESC
LIMIT $2
OFFSET $3
`

type listMessagesParams struct {
	ID     int32 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type listMessagesRow struct {
	MessageID    int32              `json:"message_id"`
	Text         string             `json:"text"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	SenderName   string             `json:"sender_name"`
	ChatroomName string             `json:"chatroom_name"`
}

func (q *Queries) listMessages(ctx context.Context, arg listMessagesParams) ([]listMessagesRow, error) {
	rows, err := q.db.Query(ctx, listMessages, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []listMessagesRow{}
	for rows.Next() {
		var i listMessagesRow
		if err := rows.Scan(
			&i.MessageID,
			&i.Text,
			&i.CreatedAt,
			&i.SenderName,
			&i.ChatroomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
