// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: createUser :one
INSERT INTO "users" (
    username,
    nickname,
    hashed_password,
    email
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, nickname, hashed_password, email, created_at
`

type createUserParams struct {
	Username       string `json:"username"`
	Nickname       string `json:"nickname"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) createUser(ctx context.Context, arg createUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Nickname,
		arg.HashedPassword,
		arg.Email,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: deleteUser :exec
DELETE FROM "users"
WHERE id=$1
`

func (q *Queries) deleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: getUser :one
SELECT id, username, nickname, hashed_password, email, created_at FROM "users"
WHERE username=$1
`

func (q *Queries) getUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: updateUser :one
UPDATE "users"
SET 
    nickname = COALESCE($1,nickname),
    hashed_password = COALESCE($2,hashed_password),
    email = COALESCE($3,email)
WHERE 
    username = $4
RETURNING id, username, nickname, hashed_password, email, created_at
`

type updateUserParams struct {
	Nickname       pgtype.Text `json:"nickname"`
	HashedPassword pgtype.Text `json:"hashed_password"`
	Email          pgtype.Text `json:"email"`
	Username       string      `json:"username"`
}

func (q *Queries) updateUser(ctx context.Context, arg updateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Nickname,
		arg.HashedPassword,
		arg.Email,
		arg.Username,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
