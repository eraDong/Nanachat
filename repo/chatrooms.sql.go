// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chatrooms.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChatrooms = `-- name: createChatrooms :one
INSERT INTO "chatrooms" (
    chatroom_name,
    description
) VALUES (
    $1, $2
) RETURNING id, chatroom_name, description, created_at
`

type createChatroomsParams struct {
	ChatroomName string      `json:"chatroom_name"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) createChatrooms(ctx context.Context, arg createChatroomsParams) (Chatrooms, error) {
	row := q.db.QueryRow(ctx, createChatrooms, arg.ChatroomName, arg.Description)
	var i Chatrooms
	err := row.Scan(
		&i.ID,
		&i.ChatroomName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChatrooms = `-- name: deleteChatrooms :exec
DELETE FROM "chatrooms"
WHERE id=$1
`

func (q *Queries) deleteChatrooms(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteChatrooms, id)
	return err
}

const getChatrooms = `-- name: getChatrooms :one
SELECT id, chatroom_name, description, created_at FROM "chatrooms"
WHERE chatroom_name=@chatroom_name
`

func (q *Queries) getChatrooms(ctx context.Context) (Chatrooms, error) {
	row := q.db.QueryRow(ctx, getChatrooms)
	var i Chatrooms
	err := row.Scan(
		&i.ID,
		&i.ChatroomName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateChatrooms = `-- name: updateChatrooms :one
UPDATE "chatrooms"
SET 
    description = COALESCE($1,description)
WHERE 
    chatroom_name = $2
RETURNING id, chatroom_name, description, created_at
`

type updateChatroomsParams struct {
	Description  pgtype.Text `json:"description"`
	ChatroomName string      `json:"chatroom_name"`
}

func (q *Queries) updateChatrooms(ctx context.Context, arg updateChatroomsParams) (Chatrooms, error) {
	row := q.db.QueryRow(ctx, updateChatrooms, arg.Description, arg.ChatroomName)
	var i Chatrooms
	err := row.Scan(
		&i.ID,
		&i.ChatroomName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
